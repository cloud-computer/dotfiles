// [bool] Permit clients to write to the TTY
permit_write = true

// [object] Client terminal (hterm) preferences
preferences {

  // [enum(null, "none", "ctrl-alt", "left-alt", "right-alt")]
  //     Select an AltGr detection hack^Wheuristic.
  //       null: Autodetect based on navigator.language: "en-us" => "none", else => "right-alt"
  //       "none": Disable any AltGr related munging.
  //       "ctrl-alt": Assume Ctrl+Alt means AltGr.
  //       "left-alt": Assume left Alt means AltGr.
  //       "right-alt": Assume right Alt means AltGr.
  // alt_gr_mode = null

  // [enum("escape", "8-bit", "browser-key")]
  //     Controls how the alt key is handled.
  //       "escape"....... Send an ESC prefix.
  //       "8-bit"........ Add 128 to the unshifted character as in xterm.
  //       "browser-key".. Wait for the keypress event and see what the browser says.
  //                       (This won't work well on platforms where the browser performs a default action for some alt sequences.)
  alt_sends_what = "browser-key"

  // [bool] If true, terminal bells in the background will create a Web Notification. http://www.w3.org/TR/notifications/
  //        Displaying notifications requires permission from the user.
  //        When this option is set to true, hterm will attempt to ask the user for permission if necessary.
  //        Note browsers may not show this permission request
  //        if it did not originate from a user action.
  // desktop_notification_bell = false

  // [map[string]map[string]string]
  //     A nested map where each property is the character set code and the value is a map that is a sparse array itself.
  //     In that sparse array, each property is the received character and the value is the displayed character.
  //     For example:
  //       {"0" = {"+" = "\u2192"
  //               "," = "\u2190"
  //               "-" = "\u2191"
  //               "." = "\u2193"
  //               "0" = "\u2588"}}
  // character_map_overrides = null

  // [bool] Whether or not to close the window when the command exits.
  close_on_exit = true

  // [bool] Automatically copy mouse selection to the clipboard.
  copy_on_select = true

  // [bool] Whether to clear the selection after copying.
  clear_selection_after_copy = true

  // [map[string]string] The default environment variables, as an object.
  // environment = {"TERM" = "xterm-256color"}

  // [string] Default font family for the terminal text.
  // font_family = "'DejaVu Sans Mono', 'Everson Mono', FreeMono, 'Menlo', 'Terminal', monospace"

  // [int] The default font size in pixels.
  font_size = 13

  // [map[string]string]
  //     A map of key sequence to key actions.
  //     Key sequences include zero or more modifier keys followed by a key code.
  //     Key codes can be decimal or hexadecimal numbers, or a key identifier.
  //     Key actions can be specified a string to send to the host, or an action identifier.
  //     For a full list of key code and action identifiers, see https://goo.gl/8AoD09.
  //     Sample keybindings:
  //       {"Ctrl-Alt-K" = "clearScrollback"
  //        "Ctrl-Shift-L"= "PASS"
  //        "Ctrl-H" = "'HELLO\n'"}
  // keybindings = null

  // [bool] If true, convert media keys to their Fkey equivalent.
  //        If false, let the browser handle the keys.
  media_keys_are_fkeys = true

  // [bool] Set whether the meta key sends a leading escape or not.
  // meta_sends_escape = true

  // [enum(null, 0, 1, 2, 3, 4, 5, 6]
  //     Mouse paste button, or null to autodetect.
  //     For autodetect, we'll try to enable middle button paste for non-X11 platforms.
  //     On X11 we move it to button 3.
  // mouse_paste_button = null

  // [bool] If true, page up/down will control the terminal scrollbar and shift page up/down will send the VT keycodes.
  //        If false then page up/down sends VT codes and shift page up/down scrolls.
  // page_keys_scroll = false

  // [bool] The vertical scrollbar mode.
  scrollbar_visible = false

}
