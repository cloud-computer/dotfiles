[alias]
    a = add
    aa = diff --cached
    ap = add -p

    # list branches sorted by last modified
    b = "!git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads | sed -e 's-refs/heads/--'"
    bc = "!f() { git branch --merged | egrep -v \"(^\\*|master|staging)\" | xargs git branch -d; }; f"
    bls = ls-remote --heads
    br = for-each-ref --format='%(refname:short) -> %(upstream:short)' refs/heads
    brm = branch -D

    cln = clean -df

    co = checkout
    cob = checkout -b
    cot = checkout --track

    c = commit --verbose
    ca = commit -a --amend --verbose
    cp = checkout -p HEAD
    cm = commit -m
    cam = commit -a -m
    cmp = "!f() { git commit -m \"$1\"; git push; }; f"
    camp = "!f() { git commit -a -m \"$1\"; git push; }; f"

    d = diff
    dashboard = "!f() { /usr/local/bin/grv -repoFilePath /stemn/stemn-backend \"$@\"; }; f"
    db = "!git diff $(git merge-base $(git branch | grep \\* | cut -d ' ' -f2) master) $(git branch | grep \\* | cut -d ' ' -f2)"
    dbl = "!git diff --name-only $(git merge-base $(git branch | grep \\* | cut -d ' ' -f2) master) $(git branch | grep \\* | cut -d ' ' -f2)"
    ds = diff --stat

    # provide help by listing aliases
    h = "!git config -l | grep alias | cut -c 7-"

    l = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
    ll = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
    lll = log --oneline --graph --all --decorate --abbrev-commit

    p = "!git fetch; git pull --rebase"
    pu = push
    pp = "!git pull --no-edit; git push"

    # create a pull request. first argument is pull request name.
    pr = "!f() { \
      BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD); \
      PR_NAME=${1-$BRANCH_NAME}; \
      git add .; \
      git cm $PR_NAME; \
      git push -u origin $BRANCH_NAME:$PR_NAME; \
      hub pull-request -b develop -h $PR_NAME -m \"[WIP] ${PR_NAME}\"; \
    }; f"

    r = remote -v
    ra = "!f() { git remote add $1 git@github.com:$2.git; }; f" # usage: git ra remote-name username/repository | adds a remote pointing to a repository
    rbm = "!git rebase -i $(git merge-base $(git branch | grep \\* | cut -d ' ' -f2) master)"

    s = status
    su = status --untracked-files=no
    search = "!f() { git rev-list --all | GIT_PAGER=cat xargs git grep \"$@\"; }; f"

    # interactively split current branch into two branches
    # doesnt allow BASH-style if statements
    split = "!f() { \
      BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD); \
      UUID=$(cut -c-4 /proc/sys/kernel/random/uuid); \
      \
      git status; \
      echo ""; \
      echo \\<======================== G I T ---- S P L I T ========================\\>;\
      echo [Please select the changes to store to the $BRANCH_NAME branch]; \
      echo [NOTE: Leftover unstaged changes will be automatically pushed to the split branch]; \
      if $(echo $BRANCH_NAME | grep -qE '\\-split\\-'); \
        then SPLIT_NAME=${BRANCH_NAME}-${UUID}; \
        else SPLIT_NAME=${BRANCH_NAME}-split-${UUID}; \
      fi; \
      \
      git branch -c $BRANCH_NAME $SPLIT_NAME; \
      read -p 'press ENTER to interactively select changes\n' BLANK; \
      git add --interactive; \
      \
      read -p 'Enter the commit message for your selected changes: ' COMMIT_MSG; \
      git commit -m \"$COMMIT_MSG\"; \
      git push; \
      \
      read -p 'press ENTER to push leftover changes to the split branch\n' BLANK; \
      git stash push --no-keep-index --include-untracked; \
      \
      git checkout $SPLIT_NAME; \
      git branch --unset-upstream; \
      git stash pop; \
      \
      read -p 'Enter the commit message for the leftover changes: ' COMMIT_MSG; \
      git add -A; \
      git commit -am \"$COMMIT_MSG\"; \
      git push -u origin $SPLIT_NAME; \
    }; f"

[push]
    default = simple

[core]
    safecrlf = false
    pager = diff-so-fancy | less -RFX

[sequence]
    editor = rebase-editor

[interactive]
    singleKey = true

[color]
    ui = true

[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22

[color "diff"]
    meta = yellow
    frag = magenta bold
    commit = yellow bold
    old = red bold
    new = green bold
    whitespace = red reverse

[diff]
    interHunkContext = 0
